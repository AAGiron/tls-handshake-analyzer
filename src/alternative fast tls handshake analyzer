import argparse
import os
import sys
import pyshark
import statistics

print("""  ________   _____    __  __                __     __          __           ___                __                     
/_  __/ /  / ___/   / / / /___ _____  ____/ /____/ /_  ____ _/ /_____     /   |  ____  ____ _/ /_  ______  ___  _____
/ / / /   \__ \   / /_/ / __ `/ __ \/ __  / ___/ __ \/ __ `/ //_/ _ \   / /| | / __ \/ __ `/ / / / /_  / / _ \/ ___/
/ / / /______/ /  / __  / /_/ / / / / /_/ (__  ) / / / /_/ / ,< /  __/  / ___ |/ / / / /_/ / / /_/ / / /_/  __/ /    
/_/ /_____/____/  /_/ /_/\__,_/_/ /_/\__,_/____/_/ /_/\__,_/_/|_|\___/  /_/  |_/_/ /_/\__,_/_/\__, / /___/\___/_/     
                                                                                         /____/                   
""")

parser = argparse.ArgumentParser(description='PCAP Pyshark reader')
parser.add_argument('--pcap', metavar='<pcap capture file>', help='pcap file to parse', required=True)
parser.add_argument('--tlskey', metavar='<tls key log file>', help='key log file to decrypt tls messages', required=False)

args = parser.parse_args()

if not os.path.isfile(args.pcap):
    print('"{}" does not exist.'.format(args.pcap), file=sys.stderr)
    exit(-1)
    
if args.tlskey is not None:
    cap = pyshark.FileCapture(args.pcap, display_filter="tls", override_prefs={'tls.keylog_file': args.tlskey}, use_json=True)
else:
    cap = pyshark.FileCapture(args.pcap, display_filter="tls", use_json=True)
    
time_ua_both = []
time_op_rp = []

matches_ua_both = {}
matches_op_rp = {}

for idx, pkt in enumerate(cap):
    if not hasattr(pkt, 'tls'):
        continue
        
    if not hasattr(pkt.tls, 'record'):
        continue

    op_rp = pkt.ip.src.startswith("172.") or pkt.ip.dst.startswith("172.")
        
    if isinstance(pkt.tls.record, list):
        handshake_type = [int(record.handshake.type) for record in pkt.tls.record if hasattr(record, 'handshake')]
    elif hasattr(pkt.tls.record, 'handshake'):
        #All handshakes should have a type... but some don't
        if not hasattr(pkt.tls.record.handshake, 'type'):
            continue
            
        handshake_type = [int(pkt.tls.record.handshake.type)]
    
    #Client Hello
    if handshake_type == [1]:
        if int(pkt.tcp.seq) == 1 and (int(pkt.tcp.dstport) == 443 or int(pkt.tcp.dstport) == 8080):
            key = (int(pkt.tcp.seq_raw), int(pkt.tcp.ack_raw))
            
            (matches_op_rp if op_rp else matches_ua_both)[key] = (pkt, )
        
    #Finished
    elif handshake_type == [20]:
        key = (int(pkt.tcp.seq_raw) - int(pkt.tcp.seq) + 1, int(pkt.tcp.ack_raw) - int(pkt.tcp.ack) + 1)
        
        if key in (matches_op_rp if op_rp else matches_ua_both) and (int(pkt.tcp.dstport) == 443 or int(pkt.tcp.dstport) == 8080):
            first = (matches_op_rp if op_rp else matches_ua_both)[key][0]        
            (matches_op_rp if op_rp else matches_ua_both)[key] = (first, pkt)
            
            time = 1000 * (float(pkt.sniff_timestamp) - float(first.sniff_timestamp))
            
            del (matches_op_rp if op_rp else matches_ua_both)[key]
            
            #sometimes a non captured finish matches a finish from waaaaaay later, which messes everything... or more likely a timeout that was handled in the application
            if time > 100000: # this is 100 seconds -> timeout in the app is 10 seconds
                continue
                
            (time_op_rp if op_rp else time_ua_both).append(time)
                
print("Matches op-rp: %d" % len(time_op_rp))
print("Not Matches op-rp: %d" % len(matches_op_rp))

print()
print("Matches ua-rp or ua-op: %d" % len(time_ua_both))
print("Not Matches ua-rp or ua-op: %d" % len(matches_ua_both))

print()
print("Summary:")

if len(time_op_rp) > 2:
    print("RP-OP -> Mean: %f, stdev: %f" % (statistics.mean(time_op_rp), statistics.stdev(time_op_rp)))
    
if len(time_ua_both) > 2:
    print("UA-RP and UA-OP -> Mean: %f, stdev: %f" % (statistics.mean(time_ua_both), statistics.stdev(time_ua_both)))
